// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO task (
  title, description, completed, created_by
) VALUES (
  ?, ?, ?, ?
)
RETURNING task_id, title, description, completed, created_by, created_at, updated_at
`

type CreateTaskParams struct {
	Title       string
	Description sql.NullString
	Completed   sql.NullBool
	CreatedBy   int64
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.CreatedBy,
	)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM task
WHERE task_id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, taskID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, taskID)
	return err
}

const getApiKey = `-- name: GetApiKey :one
SELECT key_id, api_key, user_id FROM api_key
WHERE api_key = ? LIMIT 1
`

func (q *Queries) GetApiKey(ctx context.Context, apiKey string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getApiKey, apiKey)
	var i ApiKey
	err := row.Scan(&i.KeyID, &i.ApiKey, &i.UserID)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT task_id, title, description, completed, created_by, created_at, updated_at FROM task
WHERE task_id = ? LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, taskID int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, taskID)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT task_id, title, description, completed, created_by, created_at, updated_at FROM task
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE task
set title = ?,
description = ?,
completed = ?,
updated_at = ?
WHERE task_id = ?
RETURNING task_id, title, description, completed, created_by, created_at, updated_at
`

type UpdateTaskParams struct {
	Title       string
	Description sql.NullString
	Completed   sql.NullBool
	UpdatedAt   sql.NullTime
	TaskID      int64
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.UpdatedAt,
		arg.TaskID,
	)
	return err
}
